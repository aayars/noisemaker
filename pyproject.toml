[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "noisemaker"
version = "0.5.0"
description = "Generates procedural noise with Python 3 and TensorFlow"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
authors = [
    {name = "Alex Ayars", email = "aayars@gmail.com"}
]
keywords = ["noise", "procedural", "tensorflow", "art", "generative"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "absl-py>=0.9,<2.4",
    "click>=8.3.0,<9",
    "colorthief>=0.2.1,<0.3",
    "h5py>=3.10.0,<4",
    "loguru>=0.7.3,<0.8",
    "opensimplex>=0.3,<0.4",
    "pillow>=10.0.1,<13",
    "protobuf>=4.25.8,<7",
    "requests>=2.4.2,<3",
    "six>=1.15,<1.18",
    "tensorflow>=2.20.0,<3",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2,<9",
    "black>=24.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "types-requests>=2.31.0",
    "pre-commit>=4.0.0",
]
docs = [
    "sphinx>=7.0.0,<9",
    "sphinxcontrib-programoutput>=0.18,<1",
    "furo>=2024.0.0",
]

[project.urls]
Homepage = "https://github.com/aayars/py-noisemaker"
Documentation = "http://noisemaker.readthedocs.io/"
Repository = "https://github.com/aayars/py-noisemaker"
Issues = "https://github.com/aayars/py-noisemaker/issues"

[project.scripts]
magic-mashup = "noisemaker.scripts.magic_mashup:main"
mood = "noisemaker.scripts.mood:main"
noisemaker = "noisemaker.scripts.noisemaker:main"

[tool.setuptools]
packages = ["noisemaker", "noisemaker.scripts", "noisemaker.dsl", "dsl"]

[tool.setuptools.package-data]
noisemaker = ["fonts/**/*"]
dsl = ["*.dsl"]

[tool.black]
line-length = 160
target-version = ["py39", "py310", "py311", "py312"]
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
  | \.eggs
)/
'''

[tool.ruff]
line-length = 160
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E201",  # whitespace after '(' - used intentionally in masks.py
    "E202",  # whitespace before ')' - used intentionally in masks.py
    "E402",  # module level import not at top - docstrings come first
    "E501",  # line too long - handled by black
    "E741",  # ambiguous variable names (l, I, O) - used in scientific/graphics code
    "N802",  # function name should be lowercase - allows CamelCase for DSL/API consistency
    "N803",  # argument name should be lowercase - allows CamelCase in DSL parser
    "N806",  # variable in function should be lowercase - allows single-letter scientific notation (lC, lN, wE, etc.)
    "N811",  # constant imported as non-constant - used for palettes
    "N816",  # mixedCase in global scope - used in DSL builtins
    "N818",  # exception naming - UnusedKeys is descriptive as-is
    "B007",  # unused loop control variables - sometimes intentional in enumerate/zip
    "B904",  # raise from err/None - will be fixed in modernization pass
    "C402",  # dict comprehension - existing code pattern
    "F821",  # undefined name - will be fixed in modernization pass
    "F841",  # unused local variable - will be fixed in cleanup pass
    "UP006", # type vs Type annotation - will migrate in modernization pass
    "UP030", # format specifiers - will migrate in modernization pass
    "UP031", # f-strings vs % format - will migrate in modernization pass
    "UP035", # typing.Type deprecation - will migrate in modernization pass
]

[tool.ruff.lint.per-file-ignores]
"noisemaker/masks.py" = ["E201", "E202"]
"noisemaker/oklab.py" = ["N806"]  # Uses scientific notation for luminance/chroma variables
"noisemaker/dsl/parser.py" = ["N802"]  # Parser uses CamelCase method names matching grammar
"noisemaker/dsl/evaluator.py" = ["N802"]  # Evaluator uses CamelCase for consistency
"noisemaker/composer.py" = ["N802"]  # Effect() and Preset() are factories, intentionally capitalized
"noisemaker/presets.py" = ["N802"]  # PRESETS() and Preset() follow DSL naming conventions

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, tighten over time
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "opensimplex.*",
    "colorthief.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["test"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --ignore=test/parity"
markers = [
    "parity: tests that verify Python/JavaScript implementation parity (deselected by default)",
]
