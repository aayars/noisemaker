name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        pytest -v

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run black
      run: |
        black --check noisemaker

    - name: Run ruff
      run: |
        ruff check noisemaker

  type-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run mypy
      run: |
        mypy noisemaker --ignore-missing-imports

  publish-js-snapshot:
    runs-on: ubuntu-latest
    needs: [test, lint, type-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node dependencies
      run: npm install --include=dev

    - name: Build browser bundles
      run: npm run bundle

    - name: Resolve project version
      id: version
      run: |
        VERSION=$(node -e "const fs=require('fs'); const match=fs.readFileSync('pyproject.toml','utf8').match(/^version\\s*=\\s*\"([^\"]+)\"/m); if(!match){process.exit(1);} console.log(match[1]);")
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        echo "tag=${VERSION}-SNAPSHOT" >> "$GITHUB_OUTPUT"

    - name: Publish snapshot release
      env:
        GH_TOKEN: ${{ github.token }}
        VERSION: ${{ steps.version.outputs.version }}
        TAG: ${{ steps.version.outputs.tag }}
      run: |
        set -euo pipefail

        if gh release view "$TAG" >/dev/null 2>&1; then
          gh release delete "$TAG" --yes --cleanup-tag
        fi

        notes=$(printf 'Automated snapshot bundles for version %s.\n\nCommit: %s' "$VERSION" "$GITHUB_SHA")
        gh release create "$TAG" \
          --title "Noisemaker JS ${VERSION} SNAPSHOT" \
          --notes "$notes" \
          --prerelease \
          --target "$GITHUB_SHA" \
          dist/noisemaker.bundle.js \
          dist/noisemaker.min.js \
          dist/noisemaker.esm.js \
          dist/noisemaker.cjs
